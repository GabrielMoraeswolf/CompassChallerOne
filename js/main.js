"use strict";
const posts = [
    { id: 1, title: "Toyota Supra mk4", imageUrl: "./Assets/supra.jpg", body: "Toyota Supra mk4 image" },
    { id: 2, title: "Nissan Gtr", imageUrl: "./Assets/nissan-gtr-35.jpg", body: "Nissan Gtr-R35 image" }
];
const comments = [
    { id: 1, postld: 1, email: "joao@email.com", body: "Nice" },
    { id: 2, postld: 2, email: "Pedro@email.com", body: "the Godzilla car" }
];
const postCard = ({ body, id, imageUrl, title }) => `
<div class='post'>
  <button type='button' class='post-btn' id='${id}'>
    <img src='${imageUrl}' alt='${body}' />
    <div>
      <p>${title}</p>
    </div>
  </button>
</div>
`;
const commentsIndex = () => `
    <a class="HeaderMenu_link" href="comments.html"> </a>
  `;
const commentsCard = ({ body, id, email, postld }) => `<div class='comments'id='${id}'>
    <div>
      <p>${email}: ${postld} <strong>
      ${body}</strong></p>
    </div>
</div>`;
const postsList = document.getElementById('posts-list');
if (postsList) {
    let postsToHTML = '';
    console.log('postsList antes do for', postsList);
    for (const postData of posts) {
        postsToHTML += postCard(postData);
    }
    console.log('postsList depois do for', postsList);
    //postsList.innerHTML = postsToHTML
    const postButtons = document.querySelectorAll('.post-btn');
    postButtons.forEach((button) => {
        button.addEventListener('click', function () {
            //let pList.innerHTML = commentsIndex();
        });
    });
}
else {
    console.log("nao encontrado");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RzL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQWFBLE1BQU0sS0FBSyxHQUFXO0lBQ3BCLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBQyxLQUFLLEVBQUMsa0JBQWtCLEVBQUMsUUFBUSxFQUFDLG9CQUFvQixFQUFDLElBQUksRUFBRSx3QkFBd0IsRUFBQztJQUM3RixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUMsS0FBSyxFQUFDLFlBQVksRUFBQyxRQUFRLEVBQUMsNEJBQTRCLEVBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFDO0NBQzlGLENBQUM7QUFDRixNQUFNLFFBQVEsR0FBZTtJQUMzQixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsZ0JBQWdCLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQztJQUNwRCxFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsaUJBQWlCLEVBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFDO0NBQ2xFLENBQUM7QUFFRixNQUFNLFFBQVEsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFRLEVBQUUsRUFBRSxDQUFDOzsrQ0FFWCxFQUFFO2dCQUNqQyxRQUFRLFVBQVUsSUFBSTs7V0FFM0IsS0FBSzs7OztDQUlmLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FDekI7O0dBRUMsQ0FBQztBQUVKLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBQyxNQUFNLEVBQVksRUFBRyxFQUFFLENBQy9ELDRCQUE0QixFQUFFOztXQUVuQixLQUFLLEtBQUssTUFBTTtRQUNuQixJQUFJOztPQUVMLENBQUM7QUFHUixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBRXZELElBQUksU0FBUyxFQUFFO0lBQ2IsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFBO0lBRXBCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFFaEQsS0FBSyxNQUFNLFFBQVEsSUFBSSxLQUFLLEVBQUU7UUFDNUIsV0FBVyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtLQUNsQztJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFFakQsbUNBQW1DO0lBRW5DLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzRCxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDN0IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtZQUMvQix3Q0FBd0M7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztDQUNKO0tBQ0c7SUFDQSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDakMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgUG9zdHtcbiAgaWQ6IG51bWJlcjtcbiAgdGl0bGU6IHN0cmluZztcbiAgaW1hZ2VVcmwgOnN0cmluZztcbiAgYm9keTogc3RyaW5nO1xufVxuaW50ZXJmYWNlIENvbW1lbnRze1xuICBpZDogbnVtYmVyO1xuICBwb3N0bGQ6IG51bWJlcjtcbiAgZW1haWw6IHN0cmluZztcbiAgYm9keTogc3RyaW5nO1xufVxuXG5jb25zdCBwb3N0czogUG9zdFtdID0gW1xuICB7aWQ6IDEsdGl0bGU6XCJUb3lvdGEgU3VwcmEgbWs0XCIsaW1hZ2VVcmw6XCIuL0Fzc2V0cy9zdXByYS5qcGdcIixib2R5OiBcIlRveW90YSBTdXByYSBtazQgaW1hZ2VcIn0sXG4gIHtpZDogMix0aXRsZTpcIk5pc3NhbiBHdHJcIixpbWFnZVVybDpcIi4vQXNzZXRzL25pc3Nhbi1ndHItMzUuanBnXCIsYm9keTogXCJOaXNzYW4gR3RyLVIzNSBpbWFnZVwifVxuXTtcbmNvbnN0IGNvbW1lbnRzOiBDb21tZW50c1tdID0gW1xuICB7aWQ6IDEscG9zdGxkOjEsZW1haWw6XCJqb2FvQGVtYWlsLmNvbVwiLGJvZHk6IFwiTmljZVwifSxcbiAge2lkOiAyLHBvc3RsZDoyLGVtYWlsOlwiUGVkcm9AZW1haWwuY29tXCIsYm9keTogXCJ0aGUgR29kemlsbGEgY2FyXCJ9XG5dO1xuXG5jb25zdCBwb3N0Q2FyZCA9ICh7IGJvZHksIGlkLCBpbWFnZVVybCwgdGl0bGUgfTogUG9zdCkgPT4gYFxuPGRpdiBjbGFzcz0ncG9zdCc+XG4gIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0ncG9zdC1idG4nIGlkPScke2lkfSc+XG4gICAgPGltZyBzcmM9JyR7aW1hZ2VVcmx9JyBhbHQ9JyR7Ym9keX0nIC8+XG4gICAgPGRpdj5cbiAgICAgIDxwPiR7dGl0bGV9PC9wPlxuICAgIDwvZGl2PlxuICA8L2J1dHRvbj5cbjwvZGl2PlxuYDtcblxuY29uc3QgY29tbWVudHNJbmRleCA9ICgpID0+IFxuICBgXG4gICAgPGEgY2xhc3M9XCJIZWFkZXJNZW51X2xpbmtcIiBocmVmPVwiY29tbWVudHMuaHRtbFwiPiA8L2E+XG4gIGA7XG5cbmNvbnN0IGNvbW1lbnRzQ2FyZCA9ICh7IGJvZHksIGlkLCBlbWFpbCxwb3N0bGQgfTogQ29tbWVudHMgKSA9PiBcbmA8ZGl2IGNsYXNzPSdjb21tZW50cydpZD0nJHtpZH0nPlxuICAgIDxkaXY+XG4gICAgICA8cD4ke2VtYWlsfTogJHtwb3N0bGR9IDxzdHJvbmc+XG4gICAgICAke2JvZHl9PC9zdHJvbmc+PC9wPlxuICAgIDwvZGl2PlxuPC9kaXY+YDtcblxuXG5jb25zdCBwb3N0c0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zdHMtbGlzdCcpXG5cbmlmIChwb3N0c0xpc3QpIHtcbiAgbGV0IHBvc3RzVG9IVE1MID0gJydcblxuICBjb25zb2xlLmxvZygncG9zdHNMaXN0IGFudGVzIGRvIGZvcicsIHBvc3RzTGlzdClcblxuICBmb3IgKGNvbnN0IHBvc3REYXRhIG9mIHBvc3RzKSB7ICBcbiAgICBwb3N0c1RvSFRNTCArPSBwb3N0Q2FyZChwb3N0RGF0YSlcbiAgfVxuXG4gIGNvbnNvbGUubG9nKCdwb3N0c0xpc3QgZGVwb2lzIGRvIGZvcicsIHBvc3RzTGlzdClcblxuICAvL3Bvc3RzTGlzdC5pbm5lckhUTUwgPSBwb3N0c1RvSFRNTFxuXG4gIGNvbnN0IHBvc3RCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvc3QtYnRuJyk7XG4gIHBvc3RCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vbGV0IHBMaXN0LmlubmVySFRNTCA9IGNvbW1lbnRzSW5kZXgoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5lbHNle1xuICAgIGNvbnNvbGUubG9nKFwibmFvIGVuY29udHJhZG9cIik7XG59Il19